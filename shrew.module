<?php
// $Id$

/**
 * @file
 * A Drupal module to harvest and search records from an III WebPac instance, using David Walker's Shrew PHP module.
 *
 * Requires the File_MARC PEAR extension.
 *
 * @see http://code.google.com/p/shrew/
 * @see File_MARC
 * @see http://pear.php.net/package/File_MARC/
 */

require_once drupal_get_path('module', 'shrew') .'/lib/InnopacWeb.php';
require_once('File/MARCXML.php');

/**
 * Implementation of hook_help().
 */
function shrew_help($path, $arg) {
  switch ($path) {
    case 'admin/help#shrew':
      return '<p>'. t('Integrates the Shrew library for interacting with Innovative Interfaces integrated library systems and online catalogs.') .'</p>';
    case 'admin/settings/shrew':
      return '<p>'. t('Specify the URI for a III Webpac instance.') .'</p>';
  }
}


/**
 * Implementation of hook_menu().
 */
function shrew_menu() {
  $items['admin/settings/shrew'] = array(
    'title' => 'Shrew settings',
    'description' => 'Control how Shrew works.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shrew_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['shrew/%shrew_record/%shrew_format'] = array(
    'title' => 'Return XML for a given catalog record',
    'description' => 'Return a catalog record in a variety of XML formats',
    'page callback' => 'shrew_xml_render',
    'page arguments' => array(1, 2),
    'access arguments' => array('access shrew xml'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implementation of hook_perm().
 */
function shrew_perm() {
  return array('access shrew xml');
}


/**
 * Implementation of hook_admin_settings().
 */
function shrew_admin_settings() {
  $form['shrew_webpac_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Shrew III Webpac location'),
    '#description' => t('Please provide the location of your Webpac instance.'),
    '#default_value' => variable_get('shrew_webpac_location', ''),
    '#required' => TRUE,
  );
  
  $form['shrew_encore_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Shrew III Encore location'),
    '#description' => t('Please provide the location of your Encore instance.'),
    '#default_value' => variable_get('shrew_encore_location', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Get the path to the Shrew library.
 *
 * @return string
 *   Full path to Shrew's InnopacWeb.php.
 */
function shrew_get_library() {
  return drupal_get_path('module', 'shrew') .'/lib/InnopacWeb.php';
}


/**
 * Setter method for webpac location.
 *
 * @param $location
 *  URI for Webpac instance
 */
function shrew_set_webpac_location($location) {
  variable_set('shrew_webpac_location', $location);
}


/**
 * Getter method for webpac location.
 *
 * @return string
 *  URI for III Webpac instance
 */
function shrew_get_webpac_location() {
  return variable_get('shrew_webpac_location', NULL);
}


/**
 * Setter method for Encore location.
 *
 * @param $location
 *  URI for Encore instance
 */
function shrew_set_encore_location($location) {
  variable_set('shrew_encore_location', $location);
}


/**
 * Getter method for Encore location.
 *
 * @return string
 *  URI for III Encore instance
 */
function shrew_get_encore_location() {
  return variable_get('shrew_encore_location', NULL);
}


/**
 * Ensure classes are properly loaded.
 *
 * @param $once
 *   bool to determine if PHP's require or require_once should be called
 */
function shrew_require($once = TRUE) {

  $library = shrew_get_library();

  if ($once) {
    require_once $library;
    require_once 'File/MARCXML.php';
  }
  else {
    require $library;
    require 'File/MARCXML.php';
  }
}


/**
 * Helper function to instantiate a new shrewClient
 *
 * @param $webpac_location
 *   URI for III Webpac instance
 * @return InnopacWeb
 *   Returns a new instance of the InnopacWeb class from the shrew library
 *
 * @see InnopacWeb
 */
function shrew_client($webpac_location = FALSE) {
  static $shrew = NULL;
  shrew_require();

  if ($webpac_location == FALSE) {
    $webpac_location = shrew_get_webpac_location();
  }

  $shrew = new InnopacWeb($webpac_location);
  return $shrew;
}


/**
 * Pretty print a File_MARC_Field object without tags, indicators, etc.
 *
 * @param File_MARC_Field $field
 *   File_MARC_Field object to format
 * @param array $exclude
 *   array of subfields to exclude
 * @return string
 *  the formatted field data
 *
 * @see File_MARC_Field
 */
function shrew_field_format($field, $exclude = array('2')) {
    if ($field->isControlField()) {
        $out = $field->getData();
    }
    else {
        $out = '';
        foreach ($field->getSubfields() as $subfield) {
            $code = $subfield->getCode();
            if (substr($field->getTag(), 0, 1) == '6' and (in_array($code, array('v', 'x', 'y', 'z')))) {
                $out .= ' -- '. $subfield->getData();
            }
            elseif (!in_array($code, $exclude)) {
                $out .= ' '. $subfield->getData();
            }
        }
        $out = trim($out);
    }
    return $out;
}


/**
  * Retrieve an array of formatted fields from a File_MARC_Record object,
  * specified by tag
  *
  * @param File_MARC_Record $record
  *   record
  * @param string $tag
  *   MARC tag to retrieve
  * @param bool $pcre
  *   if true, then match as a regular expression
  * @return array
  */
function shrew_field_get($record = NULL, $tag = NULL, $pcre = FALSE) {
  $out = array();
  if (!empty($record)) {
    $fieldset = $record->getFields($tag, $pcre);
    $out = array_map('shrew_field_format', $fieldset);
  }
  return $out;
}


/**
 * Apparently this function does nothing. It was probably a wrapper function that never got completed.
 */
function shrew_format_load($format) {
  return $format;
}


/**
  * Function to check if record actually exists in system. This does not use
  * drupal_http_request since http://drupal.org/node/183435 has yet to be
  * resolved - some Webpac instances return malformed responses.
  *
  * @param string $id
  *   record ID
  * @param string $webpac_location
  *   string URI for III Webpac instance
  * @return boolean
  */
function shrew_record_check($id, $webpac_location = FALSE) {
  $shrew = shrew_client($webpac_location);
  $url = $shrew->goToBibliographicRequestPage($id);
  $response = file_get_contents($url);
  //$data = $response->data;
  //echo htmlspecialchars($data);
  //if (($response->code == 200) && (stristr($data, 'no such record') === FALSE)) {
  if (stristr($response, 'no such record') === FALSE) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
  * Wrapper function for Shrew's InnopacWeb::getRecords(). Returns a different
  * format for objects as we're parsing the MARCXML response into
  * File_MARC_Record objects.
  *
  * @param string $id
  *   string of record IDs, separated by spaces
  * @param string $webpac_location
  *   string URI for III Webpac instance
  * @return array
  */
function shrew_record_get($id, $webpac_location = FALSE) {
  $shrew = shrew_client($webpac_location);
  $out = array();
  $response = $shrew->getRecords($id);
  if (count($response) > 0) {
    foreach ($response as $key => $r) {
      $srec = new shrewRecord();
      $xml = $r->bibliographicRecord->saveXML();
      $srec->bibliographicRecord = shrew_record_parse($xml);
      $srec->items = $r->items;
      $out[$key] = $srec;
    }
  }
  return $out;
}


/**
 * Load the XML for a given record
 *
 * @param string $id
 *   record id (bnumber)
 * @return string
 */
function shrew_record_load($id) {
  if (shrew_record_check($id)) {
    $rsp = shrew_record_get($id);
    return $rsp[$id]->bibliographicRecord->toXML();
  } else {
    return "<error><description>no such record</description><recnum>$id</recnum></error>";
  }
}


/**
 * Parses a single MARCXML record stored as a string into a File_MARC_Record
 * object
 *
 * @param string $record
 *   string Single MARCXML record
 *
 * @return
 *   File_MARC_Record
 */
function shrew_record_parse($record) {
  $obj = new File_MARCXML($record, 2);
  $mxrecord = $obj->next();
  return $mxrecord;
}


/**
  * Retrieve a formatted 245 field from bibliographic records specified by
  * their record ID.
  *
  * @param string $id
  *   string of record IDs, separated by spaces
  * @param string $webpac_location
  *   string URI for III Webpac instance
  * @return array
  */
function shrew_record_title($id, $webpac_location = FALSE) {
  $response = shrew_record_get($id, $webpac_location);
  $out = array();
  if (count($response) > 0) {
    foreach ($response as $key => $r) {
      $title = shrew_field_get($r->bibliographicRecord, '245');
      $out[$key] = $title[0];
    }
  }
  return $out;
}

/**
  * Calculate the check digit from a record number not containing its type  prefix or a check digit.
  *
  * The algorithm is taken from the see link below.
  *
  * @param string $recnum
  *   record number without type prefix
  *
  * @return string
  *   string specifying checkdigit
  *
  * @see http://csdirect.iii.com/manual/rmil_records_numbers.html
  */
function shrew_calc_checkdigit($recnum) {
  $seq = array_reverse(str_split($recnum));
  $sum = 0;
  $multiplier = 2;
  foreach ($seq as $digit) {
    $digit *= $multiplier;
    $sum += $digit;
    $multiplier++;
  }
  $check = $sum % 11;
  if ($check == 10) {
    return 'x';
  }
  else {
    return strval($check);
  }
}

/**
 * Generate a link to an electronic resource using WebPAC's Web Access Management (WAM) proxy.
 *
 * This is untested because of delays in WAM deployment.
 *
 * @param string $url
 *   URL to route to proxy
 * @param bool $strip_www
 *   Strip "www." from webpac location
 * @param string $webpac_location
 *   URL to webpac location
 * @return string
 *   WAM-wrapped version of URL
 */
function shrew_wam_url($url, $strip_www = TRUE, $webpac_location = FALSE) {
  if ($webpac_location == FALSE) {
    $webpac_location = shrew_get_webpac_location();
  }
  $url_array = parse_url($url);
  $webpac_array = parse_url($webpac_location);
  if (!isset($url_array['port'])) {
    $url_array['port'] = 0;
  }
  if ($strip_www && (substr($webpac_array['host'], 0, 4) == 'www.')) {
    $webpac_array['host'] = substr($webpac_array['host'], 4);
  }
  $proxied_url = $url_array['scheme'] .'://'. $url_array['port'] .'-'.
    $url_array['host'] .'.'. $webpac_array['host'] . $url_array['path'];
  $proxied_url .= isset($url_array['query']) ? '?'. $url_array['query'] : '';
  return $proxied_url;
}


/**
 * Return the XML of a catalog record in different formats
 *
 * @param string $marcxml
 *   record data as MARCXML
 * @param string $format
 *   format to transform to
 * @return string
 */
function shrew_xml($marcxml, $format = 'marcxml.xml') {
  switch ($format) {
    case 'marcxml.xml':
    case 'error':
      return $marcxml;
      break;

    case 'mods.xml':
      $xslt = new XSLTProcessor();
      $xsl = new DOMDocument;
      $xsl->load(drupal_get_path('module', 'shrew')
        .'/xslt/MARC21slim2MODS3-3.xsl');
      $xslt->importStyleSheet($xsl);
      $xml = new DOMDocument;
      $xml->loadXML($marcxml);
      return $xslt->transformToXML($xml);
      break;
    
    case 'oai_dc.xml':
      $xslt = new XSLTProcessor();
      $xsl = new DOMDocument;
      $xsl->load(drupal_get_path('module', 'shrew') 
        .'/xslt/MARC21slim2OAIDC.xsl');
      $xslt->importStyleSheet($xsl);
      $xml = new DOMDocument;
      $xml->loadXML($marcxml);
      return $xslt->transformToXML($xml);
      break;
  }
}

/**
 * Wrapper function for shrew_xml; assists with setting HTTP headers.
 *
 * @param $marcxml
 *   String containing MARCXML extracted from catalog record
 * @param $format
 *   String specifying format of expected response
 */
function shrew_xml_render($marcxml, $format) {
  $ctype = 'application/xml';
  // If it can't find the record, set the format handler in advance.
  if (stristr($marcxml, 'no such record')) {
    $format = 'error';
  }
  switch ($format) {
    case 'marcxml.xml':
      $ctype = 'application/marcxml+xml';
      break;

    case 'mods.xml':
      $ctype = 'application/mods+xml';
      break;
  }
  drupal_set_header("Content-Type: $ctype; charset=utf-8");
  print shrew_xml($marcxml, $format);
}

/**
 * A subclass of InnopacWeb_Record, since the object is different.
 *
 * We are using shrew_get() to return a slightly different object;
 * shrewRecord::bibliographicRecord is a File_MARC_Record, not a DOMDocument
 *
 * @see InnopacWeb_Record
 */
class shrewRecord extends InnopacWeb_Record {}
