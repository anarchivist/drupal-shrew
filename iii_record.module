<?php
// $Id: iii_record.module,v 1.2.2.3 2008/09/12 23:22:21 eaton Exp $

/**
 * @file
 * Defines a field type for referencing a record in an Innovative Interfaces
 * online library catalog.
 */

/**
 * Implementation of hook_theme().
 */
function iii_record_theme() {
  return array(
    'iii_record_text' => array(
      'arguments' => array('element'),
    ),
    'iii_record_formatter_default' => array(
      'arguments' => array('element'),
    ),
    'iii_record_formatter_url' => array(
      'arguments' => array('element'),
    ),
    'iii_record_formatter_plain' => array(
      'arguments' => array('element'),
    ),
    'iii_record_formatter_title' => array(
      'arguments' => array('element'),
    ),
  );
}


/**
 * Implementation of hook_field_info().
 *
 * Here we indicate that the content module will use its default
 * handling for the view of this field.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function iii_record_field_info() {
  return array(
    'iii_record' => array(
      'label' => t('III record number'),
      'description' => t('Store the ID of a record held in an III system.'),
    ),
  );
}


/**
 * Implementation of hook_field_settings().
 */
function iii_record_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns['value'] = array('type' => 'varchar', 'length' => 32, 'not null' => FALSE);
      return $columns;

    case 'views data':
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);

      // Swap the filter handler to the 'in' operator.
      $data[$table_alias][$field['field_name'] .'_value']['filter']['handler'] = 'views_handler_filter_many_to_one_content';

      return $data;
  }
}


/**
 * Implementation of hook_field().
 */
function iii_record_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      foreach ($items as $delta => $item) {
        if (is_array($item)) {
          if (!empty($item['value']) && !shrew_record_check($item['value'])) {
            form_set_error($field['field_name'] .']['. $delta .'][value', t('%name : No III record with the ID %id could be located.', array('%name' => t($field['widget']['label']), '%id' => $item['value'])));
          }
        }
      } 
      return $items;

  }
}


/**
 * Implementation of hook_content_is_empty().
 */
function iii_record_content_is_empty($item, $field) {
  if (empty($item['value'])) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Implementation of hook_field_formatter_info().
 */
function iii_record_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Link with "Link to catalog record" text'),
      'field types' => array('iii_record'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'url' => array(
      'label' => t('Link with URL displayed'),
      'field types' => array('iii_record'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'plain' => array(
      'label' => t('Record number as text'),
      'field types' => array('iii_record'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'title' => array(
      'label' => t('Title as link'),
      'field types' => array('iii_record'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}


/**
 * Theme function for 'default' iii_record field formatter
 */
function theme_iii_record_formatter_default($element) {
  // Display a normal link if both title and URL are available.
  if ($iii_record = $element['#item']['value']) {
    $url = shrew_get_webpac_location() .'/record='. $iii_record;
    return l("Link to catalog record", $url, array());
  }
}


/**
 * Theme function for 'url' iii_record field formatter
 */
function theme_iii_record_formatter_url($element) {
  if ($iii_record = $element['#item']['value']) {
    $url = shrew_get_webpac_location() .'/record='. $iii_record;
    return l($url, $url, array());
  }
}


/**
 * Theme function for 'plain' iii_record field formatter
 */
function theme_iii_record_formatter_plain($element) {
  if ($iii_record = $element['#item']['value']) {
    return '<span class="iii_record_number">'. $iii_record .'</span>';
  }
}


/**
 * Theme function for 'title' iii_record field formatter
 */
function theme_iii_record_formatter_title($element) {
  if ($iii_record = $element['#item']['value']) {
    $url = shrew_get_webpac_location() .'/record='. $iii_record;
    $titles = shrew_record_title($iii_record);
    return l($titles[$iii_record], $url, array());
  }
}


/**
 * Implementation of hook_widget_info().
 *
 * We need custom handling of multiple values for the iii_record_text
 * widget because we need to combine them into a options list rather
 * than display multiple elements.
 *
 * We will use the content module's default handling for default value.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function iii_record_widget_info() {
  return array(
    'iii_record_text' => array(
      'label' => t('Text field'),
      'field types' => array('iii_record'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}


/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 */
function iii_record_elements() {
  return array(
    'iii_record_text' => array(
      '#input' => TRUE,
      '#process' => array('iii_record_text_process'),
    ),
  );
}


/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function iii_record_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}


/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function iii_record_text_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $delta = $element['#delta'];

  $iii_record_key = $element['#columns'][0];
  $element[$iii_record_key] = array(
    '#type' => 'textfield',
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#default_value' => isset($element['#value'][$iii_record_key]) ? $element['#value'][$iii_record_key] : NULL,
  );
  return $element;
}


/**
 * Validate an select element.
 *
 * Remove the wrapper layer and set the right element's value.
 */
function iii_record_text_validate($element, &$form_state) {
  array_pop($element['#parents']);
  form_set_value($element, $form_state['values'][$element['#field_name']], $form_state);
}


function theme_iii_record_text($element) {
  // drupal_add_css(drupal_get_path('module', 'iii_record') .'/iii_record.css', 'module', 'all', FALSE);
  $output = $element['#children'];
  // if (!empty($element['#value']) && !empty($element['#value']['value'])) {
  //   $iii_record = $element['#value']['value'];
  //   if ($data = amazon_item_lookup(array($iii_record))) {
  //     $output .= '<p class="iii_record-edit-title">'. check_plain($data[$iii_record]['title']) .'</p>';
  //   }
  // }
  return $output;
}
